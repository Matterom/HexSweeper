------------------
----Challenges----
------------------
Building the hexagon map and getting that to look right took 90% of the time

How i handle the game state i'm not too happy with, but i don't have the time to make it... mostly cheat proof.
By this i mean, i store the location of the mine, the flag, and the number of adjacency within the element class list.

Come to find out the game does not run properly outside of firefox and 16x9 resolutions, Again, ran out of time to provide a solution.

The search algorithm used to scan for an empty hexagon is probably a bad practice, but i was supprised when the second itteration actually worked
it's a recursive algorithm that runs itself until nothing else remains.... not sure if this causes a memory leak...



----------------
---Files Used---
----------------

Primary HTML file: ProjectHexSweeper.HTML
Primary CSS file: Resources/Assets/Stylesheets/Hex_Main.css
Primary JS file: Resources/Main.js

Image Assets: Resources/Assets/Images
One.svg
Two.svg
Three.svg
Four.svg
Five.svg
Six.svg
Flag.png
Mine.png
big-gear.svg

-----------------
---JS Overview---
----------------------------
---Objects and Properties---
----------------------------
The 2 key objects are as follows

Difficulty object: 
var easy = {
	radius: 9,
	mines: 30
}

This defines the difficulty level, which determines the total amount of hexagons, and the amount of mines held within

and the Hex Object class and it's derivitives:
function hexagon(c) {
	this.axial = new axialCoords(c[0], c[1]);
	this.cube = new cubeCoords(c[0], c[1]);
}
function axialCoords(q, r) {
	this.q = q;
	this.r = r;
}
function cubeCoords(q, r) {
	this.x = q;
	this.z = r;
	this.y = -q-r;
}

These functions define the hexagon object which holds relevant data for performing certain adjacency functions, and can be used generally for storing the state of
the map and parsing locational data. However i did not make any function to do that as it was out of scope by the time i switched to a minesweeper implementation.

-----------------------------
---Variables and Functions---
-----------------------------
==Variables==
the following are important variables and their purpose

mapsize // this initiates the radius of the hexagon grid, regretably i could not come up with a viable alternative to assigning the viewbox size
flagCount // This initiates the level of flag
currentDifficulty // This tracks the current difficulty level for resets
time // this is the varaible that tracks the seconds the game has been in progress
xInc // the variables that determine the offset of the hexagons relative to eachother from center. This is relative to the hexfield size
yInc // see above

==Functions==
The following are important functions and their purpose

buildHexMap() // This is triggered by the difficulty option or reset button, it triggers the code that prints the hexagon map on screen
buildHex() // This compounds the information from hexmap into a single element id, and builds each hexagon on screen
populateMines() // Using elements that are hexagons, comits a search and for a random number between 0 and the amount of hexagons, applies a mine, if none already exists, subtracts one from the total amount of mines
ajacentCount() // Loops through all elements within the hexagon, and if they are not a mine, looks arround each hexagon and determines the amount of mines surounding this hexagon. it does this using getAxialByID, performing math, and then getElementbyAxial to check  the class list for mines
clearHidden() // Run whenever someone clicks on a hexagon. If the hexagon is a mine, it passes a false bool directly to the game over function. Else if it's a number, it will simply reveal the hex, otherwise it will run a recursive algorithm that reveals all hexagons near it that are either Zeros or numbers, it treats numbers as a border and will not explore past them
deployListeners() // Sets up the left and right click listeners on the relevant objects.
updateFlag() // Updates the flag count seen in the top right corner
timer() // Updates the passage of time
checkWin() // Run once all flags have been used, and checks for a win. if it determines that a flag is on every mine, it passes true to the game over function
GameOver() // Accepts a true or false and reacts apropriately, revealing the rest of the map if neccisary, and stopping the time.
getAxialByID() // When fed the ID of an element, returns the "axial" coordinates of the hexagon in question
GetElementByAxial() // When fed an Axial coordinate, Tries to find an element that matches that coordinate ID
